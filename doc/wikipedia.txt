https://en.wikipedia.org/wiki/Mutation_testing

Now, for the test to kill a mutant, the following three conditions should be met:
	- A test must reach the mutated statement.
	- Test input data should infect the program state by causing different program states for the mutant and the original program. For example, a test with a = 1 and b = 0 would do this.
	- The incorrect program state (the value of 'c') must propagate to the program's output and be checked by the test.

Weak mutation testing (or weak mutation coverage) requires that only the first and second conditions are satisfied. Strong mutation testing requires that all three conditions are satisfied. Strong mutation is more powerful, since it ensures that the test suite can really catch the problems. Weak mutation is closely related to code coverage methods. It requires much less computing power to ensure that the test suite satisfies weak mutation testing than strong mutation testing.


- Statement deletion
- Statement duplication or insertion, e.g. goto fail;[15]
- Replacement of boolean subexpressions with true and false
- Replacement of some arithmetic operations with others, e.g. + with *, - with /
- Replacement of some boolean relations with others, e.g. > with >=, == and <=
- Replacement of variables with others from the same scope (variable types must be compatible)

mutation score = mutants killed / total mutants